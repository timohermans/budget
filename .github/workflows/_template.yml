# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: cluster_build_and_deploy

on:
  workflow_call: 
    inputs:
      project_path:
        required: true
        type: string
      image_name: # e.g. budget-app
        required: true
        type: string
      deployment_path: # e.g. 'k8s/budget/frontend/deployment.yaml'
        required: true
        type: string
      tests_path:
        required: false
        type: string
      cluster_repo:
        required: false
        type: string
        default: 'timohermans/Cluster'
    secrets: 
        REGISTRY_USERNAME:
            required: true
        REGISTRY_PASSWORD:
            required: true
        PAT_TOKEN:
            required: true
        GITHUB_TOKEN:
            required: true

env:
  PROJECT_PATH: ${{ inputs.project_path }}
  TESTS_PATH: ${{ inputs.tests_path }}
  REGISTRY: 'registry.timo-hermans.nl'
  IMAGE_NAME: ${{ inputs.image_name }}
  DOTNET_VERSION: '9.0.x'
  CLUSTER_REPO: ${{ inputs.cluster_repo }}
  DEPLOYMENT_PATH: ${{ inputs.deployment_path }}


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-version: ${{ steps.version.outputs.version }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore dependencies
        run: dotnet restore $PROJECT_PATH
      - name: Build
        run: dotnet build $PROJECT_PATH --no-restore
      - name: Test
        if: ${{ env.TESTS_PATH != '' }}
        run: dotnet test $TESTS_PATH --verbosity normal

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to private registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Create image tag
        id: version
        run: |
          CURRENT_DATE=$(date +'%Y.%-m')
          VERSION="$CURRENT_DATE.${{ github.run_number }}"
          echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Created tag: $tag"

      - name: Build and push Docker images
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: ${{ env.PROJECT_PATH}}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.version.outputs.tag }}
  
  update-deployment:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Cluster repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CLUSTER_REPO }}
          token: ${{ secrets.PAT_TOKEN }}
          path: cluster-repo

      - name: Update image version in deployment.yaml
        run: |
          cd cluster-repo
          DEPLOYMENT_FILE="./${{ env.DEPLOYMENT_PATH }}"
          
          cp "$DEPLOYMENT_FILE" "$DEPLOYMENT_FILE.backup"
          
          sed -i "s|image:.*${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-version }}|" "$DEPLOYMENT_FILE"
          
          # Verify changes
          echo "Updated deployment file:"
          grep "image:" "$DEPLOYMENT_FILE"

      - name: Configure Git
        run: |
          cd cluster-repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Commit and push changes
        run: |
          cd cluster-repo
          git add "./${{ env.DEPLOYMENT_PATH }}"
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update frontend image to ${{ needs.build-and-push.outputs.image-tag }}"
            git push origin main
          fi

      - name: Show changes made
        run: |
          cd cluster-repo
          git diff HEAD^ HEAD -- "./${{ env.DEPLOYMENT_PATH }}" || echo "No changes or first commit"
