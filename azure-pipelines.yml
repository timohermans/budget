# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool: Default

container:
  image: 'itsyou0o/playwright-with-docker:latest'
  mapDockerSocket: true

variables:
  solution: 'Budget.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  LANG: en_NL.UTF-8
  dockerAppImage: $(RegistryHost)/budget
  dockerApiImage: $(RegistryHost)/budget-api

steps:

- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: '8.0.x'
  displayName: 'Use .NET SDK'

  
- task: PowerShell@2
  displayName: 'Set api appsettings.json for test'
  inputs:
    targetType: 'inline'
    script: |
      # Define the path to your appsettings.json file
      $filePath = "./Budget.Api/appsettings.Development.json"
      
      # Create a hashtable with the desired key-value pairs
      $appSettings = @"
      {
          "Swagger": {
              "ClientId": "${env:api_swagger_clientid}",
              "AuthorizeUrl": "${env:api_swagger_authorizeurl}",
              "Scopes": "${env:api_swagger_scopes}"
          },
          "AzureAd": {
              "TentantId": "${env:api_azuread_tentantid}",
              "Scopes": "${env:api_azuread_scopes}",
              "Instance": "${env:api_azuread_instance}",
              "Domain": "${env:api_azuread_domain}",
              "ClientId": "${env:api_azuread_clientid}",
              "CallbackPath": "${env:api_azuread_callbackpath}"
          }
      }
      "@
      
      # Write the JSON content to the appsettings.json file
      $appSettings | Set-Content -Path $filePath

- task: PowerShell@2
  displayName: Add app appsettings.json values for test
  inputs:
    targetType: 'inline'
    script: |
      # Define the path to your appsettings.json file
      $filePath = "./Budget.App/appsettings.Development.json"
      
      # Create a hashtable with the desired key-value pairs
      $appSettings = @"
      {
        "AzureAd": {
          "Instance": "${env:app_azuread_instance}",
          "TentantId": "${env:app_azuread_tentantid}",
          "ClientId": "${env:app_azuread_clientid}",
          "ClientCredentials": [
            {
              "SourceType": "ClientSecret",
              "ClientSecret": "${env:app_azuread_clientsecret}"
            }
          ]
        },
        "Api": {
          "BaseUrl": "https://localhost:5078",
          "Scopes": "${env:app_api_scopes}"
        }
      }
      "@
      Write-Host ${env:app_api_scopes}
      Write-Host ${env:app_azuread_tentantid}
      # Write the JSON content to the appsettings.json file
      $appSettings | Set-Content -Path $filePath

- script: 'dotnet restore $(solution) --locked-mode'
  displayName: 'Restore'
  
- script: 'dotnet build $(solution) --no-restore'
  displayName: 'Build'

- script: 'mkdir ./Budget.BlazorTests/bin/Debug/net8.0/playwright-traces'
  displayName: 'Create directory for test traces'

- task: CmdLine@2
  displayName: 'Test'
  inputs:
    script: 'dotnet test $(solution) --no-restore --no-build'
  env:
    Url: $(TestUrl)
    User__Username: $(TestUser)
    User__Password: $(TestPassword)
    User__OtpSecret: $(TestOtpSecret)

- publish: ./Budget.BlazorTests/bin/Debug/net8.0/playwright-traces
  artifact: TestResult
  condition: failed()

- script: 'echo "$(RegistryPassword)" | docker login -u $(RegistryUsername) --password-stdin $(RegistryHost)'
  displayName: Docker Login

- script: 'docker build -t $(dockerApiImage) -t $(dockerApiImage):$(Build.SourceVersion) -t $(dockerApiImage):latest . --file Budget.Api/Dockerfile '
  displayName: Docker Build Api

- script: 'docker push -a $(dockerApiImage)'
  displayName: Docker Push Api
  
- script: 'docker build -t $(dockerAppImage) -t $(dockerAppImage):$(Build.SourceVersion) -t $(dockerAppImage):latest . --file Budget.App/Dockerfile '
  displayName: Docker Build App

- script: 'docker push -a $(dockerAppImage)'
  displayName: Docker Push App

- task: SSH@0
  displayName: 'Deploy'
  inputs:
    sshEndpoint: 'Home SSH'
    runOptions: 'commands'
    commands: '/etc/webhook/commands/budget-deploy.sh'
    failOnStdErr: true
    readyTimeout: '20000'





