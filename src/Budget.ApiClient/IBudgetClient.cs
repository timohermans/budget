// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

#nullable enable annotations

namespace Budget.ApiClient
{
    /// <summary>Budget.Api | v1</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface IBudgetClient
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// </list>
        /// </exception>
        [Multipart]
        [Headers("Accept: text/plain, application/json, text/json")]
        [Post("/Transactions/upload")]
        Task<TransactionsFileJobStartResponse> PostTransactionsFileAsync(StreamPart file);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Transactions")]
        Task<ICollection<TransactionResponseModel>> GetTransactionsAsync([Query(Format = "yyyy-MM-dd")] System.DateTimeOffset? startDate, [Query(Format = "yyyy-MM-dd")] System.DateTimeOffset? endDate, [Query] string? iban);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Transactions/ibans")]
        Task<ICollection<string>> GetIbansDistinctAsync();

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/Transactions/cashflow-per-iban")]
        Task<CashflowDto> GetIbanCashflowAsync([Query(Format = "yyyy-MM-dd")] System.DateTimeOffset? startDate, [Query(Format = "yyyy-MM-dd")] System.DateTimeOffset? endDate, [Query] string? iban);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: text/plain, application/json, text/json", "Content-Type: application/json")]
        [Patch("/Transactions/{id}/cashback-date")]
        Task<UpdateTransactionCashbackDateResponse> UpdateCashbackForDateAsync(int id, [Body] TransactionPatchCashbackDateCommandModel body);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/TransactionsFileJob/{id}")]
        Task<TransactionsFileJobResponseModel> GetTransactionsFileJobAsync(System.Guid id);


    }

}

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Budget.ApiClient
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BalanceAtDateDto
    {

        [JsonPropertyName("date")]
        [JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; } = default!;

        [JsonPropertyName("balance")]
        public double Balance { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CashflowDto
    {

        [JsonPropertyName("iban")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Iban { get; set; } = default!;

        [JsonPropertyName("balancesPerDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<BalanceAtDateDto> BalancesPerDate { get; set; } = new System.Collections.ObjectModel.Collection<BalanceAtDateDto>();

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {

        [JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [JsonPropertyName("status")]
        public int? Status { get; set; } = default!;

        [JsonPropertyName("detail")]
        public string? Detail { get; set; } = default!;

        [JsonPropertyName("instance")]
        public string? Instance { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionPatchCashbackDateCommandModel
    {

        [JsonPropertyName("cashbackForDate")]
        [JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CashbackForDate { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionResponseModel
    {

        [JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [JsonPropertyName("followNumber")]
        public int FollowNumber { get; set; } = default!;

        [JsonPropertyName("iban")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Iban { get; set; } = default!;

        [JsonPropertyName("amount")]
        public double Amount { get; set; } = default!;

        [JsonPropertyName("dateTransaction")]
        [JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DateTransaction { get; set; } = default!;

        [JsonPropertyName("nameOtherParty")]
        public string? NameOtherParty { get; set; } = default!;

        [JsonPropertyName("ibanOtherParty")]
        public string? IbanOtherParty { get; set; } = default!;

        [JsonPropertyName("authorizationCode")]
        public string? AuthorizationCode { get; set; } = default!;

        [JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [JsonPropertyName("cashbackForDate")]
        [JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CashbackForDate { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionsFileJobResponseModel
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [JsonPropertyName("originalFileName")]
        public string? OriginalFileName { get; set; } = default!;

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; } = default!;

        [JsonPropertyName("processedAt")]
        public System.DateTimeOffset? ProcessedAt { get; set; } = default!;

        [JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [JsonPropertyName("errorMessage")]
        public string? ErrorMessage { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionsFileJobStartResponse
    {

        [JsonPropertyName("jobId")]
        public System.Guid JobId { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateTransactionCashbackDateResponse
    {

        [JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [JsonPropertyName("cashbackForDate")]
        [JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CashbackForDate { get; set; } = default!;

        private IDictionary<string, object>? _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625