@using Budget.Ui.Core.UseCases.Transactions.FileEtl
@using Refit

<InputFile id="inputFile" class="visually-hidden" @ref="_inputFile" OnChange="LoadFileAsync"/>

<button type="button" class="btn btn-primary fs-4" onclick="document.querySelector('#inputFile').click()">
    <i class="bi bi-cloud-arrow-up"></i>
    <span class="visually-hidden">Upload transactions</span>
</button>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <section class="position-absolute start-50 translate-middle-x p-2 rounded bg-danger-subtle" style="top: 200px">
        <div class="d-flex justify-content-end">
            <button type="button" class="btn" @onclick="@(() => _errorMessage = "")">✖️</button>
        </div>
        <p>
            Upload mislukt
        </p>
        <p>
            @_errorMessage
        </p>
    </section>
}

@code {
    [Inject] public FileEtlUseCase UseCase { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    [Inject] public ILogger<UploadTransactions> Logger { get; set; } = default!;

    private string? _errorMessage = null;
    private InputFile? _inputFile;

    private async Task LoadFileAsync(InputFileChangeEventArgs e)
    {
        try
        {
            var streamPart = new StreamPart(e.File.OpenReadStream(), e.File.Name, e.File.ContentType, "file");
            var response = await UseCase.HandleAsync(streamPart);

            if (!string.IsNullOrEmpty(response.ErrorMessage))
            {
                _errorMessage = response.ErrorMessage;
            }
            else
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            Logger.LogError(ex, "Well, poffertjes!");
        }
    }

}