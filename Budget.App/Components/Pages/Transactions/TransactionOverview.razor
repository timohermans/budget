@page "/transactions"
@using Budget.App.Apis.LoginLogout
@rendermode InteractiveServerRenderModeNoPreRender
@inject TimeProvider Time

<PageTitle>@_date?.ToString("yyyy-MM") Transacties</PageTitle>

<nav class="navbar">
    <div class="container-fluid">
        <div class="navbar-brand">
            <NavLink class="btn" href="@GetPreviousDate()" data-testid="goPrevious">
                <i class="bi bi-arrow-left-circle fs-4"></i>
            </NavLink>
            <NavLink class="btn fs-4" href="@GetToday()">@_date?.ToString("yyyy-MM")</NavLink>

            <NavLink class="btn" href="@GetNextDate()" data-testid="goNext">
                <i class="bi bi-arrow-right-circle fs-4"></i>
            </NavLink>
        </div>

        <div>
            Hello, @_user?.Identity?.Name (
            <button type="submit" class="btn btn-link p-0" @onclick="@(() => Navigator.NavigateTo(LoginLogoutApi.LogoutEndpoint, true))">log uit</button>
            )
        </div>

    </div>
</nav>


<main class="container-md flex-grow-1 vstack gap-3">
    <section id="actions" class="row mb-3">
        <div class="col-auto align-self-center">
            <NavLink href="/transactions/upload" class="btn btn-primary fs-4">
                <i class="bi bi-cloud-arrow-up"></i>
                <span class="visually-hidden">Upload transactions</span>
            </NavLink>
        </div>
        <div class="col">
            <div class="form-floating">
                <InputSelect name="iban" class="form-select" @bind-Value="Iban" @bind-Value:after="SwitchIban">
                    @foreach (var iban in _data?.IbansToSelect ?? [])
                    {
                        <option value="@iban" @key="iban">@iban</option>
                    }
                    @if (_data == null)
                    {
                        <option>Loading...</option>
                    }
                </InputSelect>
                <label>Iban</label>
            </div>
        </div>
    </section>

    <section id="budgetOverview" class="row justify-content-center">
        <h2 class="text-center">Overzicht</h2>
        <div class="col-xs-8 col-sm-6 col-md-5 col-lg-4">
            <div class="col fst-italic text-capitalize" data-testid="previousMonthHeader">@_data?.DatePreviousMonth.ToString("MMMM", _dutch)</div>
            <div class="grid-week">
                <div>Inkomen</div>
                <div class="number" data-testid="previousMonthIncome">@(_data?.IncomeLastMonth ?? 0)</div>
                <div class="symbol"></div>

                <div>Lasten</div>
                <div class="number" data-testid="previousMonthExpensesFixed">@(_data?.ExpensesFixedLastMonth ?? 0 * -1)</div>
                <div class="symbol">-</div>

                <div class="grid-line"></div>

                <div>Budget</div>
                <div class="number" data-testid="budgetAvailable">@(_data?.BudgetAvailable ?? 0)</div>
                <div class="symbol"></div>

                <div class="grid-gutter"></div>

                <div class="grid-header fst-italic text-capitalize" data-testid="budgetCalculationMonthHeader">@_data?.Date.ToString("MMMM", _dutch)</div>

                <div>Weken</div>
                <div class="number" data-testid="budgetCalculationWeeksCount">@_data?.WeeksInMonth.Count</div>
                <div class="symbol">÷</div>

                <div>Budget per week</div>
                <div class="number">
                    <span class="badge text-bg-info" data-testid="budgetCalculationBudgetPerWeek"> @(_data?.BudgetPerWeek ?? 0)</span>
                </div>
                <div class="symbol"></div>

            </div>

            <div class="grid-week"></div>
        </div>
        <div class="col-xs-8 col-sm-6 col-md-5 col-lg-4">

            <div class="grid-week">
                <div class="grid-header fst-italic text-capitalize" data-testid="expensesMonthHeader">@_data?.Date.ToString("MMMM", _dutch)</div>

                <div>Budget</div>
                <div class="number" data-testid="expensesBudgetAvailable">@_data?.BudgetAvailable</div>
                <div></div>

                @foreach (var (week, index) in (_data?.WeeksInMonth ?? [1, 2, 3, 4]).Select((w, i) => (w, i)))
                {
                    var isLast = index == _data?.WeeksInMonth.Count - 1;
                    var expenseOfWeek = _data?.ExpensesPerWeek.GetValueOrDefault(week, 0);

                    <div>Week @week @(week.IsCurrentWeek(Time) ? "👈" : "")</div>
                    <div class="number">
                        <span class="badge text-bg-light" data-testid="expensesWeek@(week)Spent">
                            @expenseOfWeek
                        </span>
                    </div>
                    <div class="@(expenseOfWeek < 0 ? "number" : "symbol")">
                        @if (expenseOfWeek < 0)
                        {
                            <span class="badge @((_data?.BudgetPerWeek + expenseOfWeek) < 0 ? "text-bg-danger" : "text-bg-success")" data-testid="expensesWeek@(week)BudgetLeft">
                                @(_data?.BudgetPerWeek + expenseOfWeek)
                            </span>
                        }
                        else if (isLast)
                        {
                            <span>+</span>
                        }
                        else
                        {
                            <span></span>
                        }
                    </div>
                }
                <div class="grid-line"></div>

                <div>Uitgegeven</div>
                <div class="number" data-testid="totalsSpent">@(_data?.ExpensesPerWeek.Values.Sum())</div>
                <div></div>

                <div>Over</div>
                <div class="number" data-testid="totalsLeft">@(_data?.BudgetAvailable + _data?.ExpensesVariable)</div>
                <div></div>

                <div @onclick="@(() => _areSavingsMetersVisible = !_areSavingsMetersVisible)">Spaarmeter</div>
                <div class="number">
                    @{
                        var totalBalance = _data?.BalancePerAccount.Values.Sum() * -1;
                    }
                    <span class="badge text-bg-@(totalBalance > 0 ? "success" : "danger")" data-testid="totalsSaved">@totalBalance</span>
                </div>
                <div></div>

                @if (_areSavingsMetersVisible)
                    foreach (var balanceKvp in _data?.BalancePerAccount ?? [])
                    {
                        <div>@balanceKvp.Key</div>
                        <div class="number">
                            <span class="badge text-bg-@(balanceKvp.Value * -1 > 0 ? "success" : "danger")" data-testid="saved@(balanceKvp.Key)">@(balanceKvp.Value * -1)</span>
                        </div>
                        <div></div>
                    }
            </div>
        </div>
    </section>

    <section id="transactionOverview">
        <h2 class="text-center">Transacties</h2>

        <QuickGrid Items="@GetTransactions()">
            <TemplateColumn Sortable="false">
                @if (context.IsIncome)
                {
                    <TransactionRowOptions OnSelected="option => HandleOptionSelected(option, context.Id)" />
                }
            </TemplateColumn>
            <TemplateColumn Title="Wk" SortBy="@(GridSort<Transaction>.ByAscending(p => p.DateTransaction.ToIsoWeekNumber()))" Sortable="true">
                @context.OriginalDate.ToIsoWeekNumber()
            </TemplateColumn>
            <PropertyColumn Title="Datum" Format="dd-MM" Property="@(p => p.DateTransaction)" InitialSortDirection="SortDirection.Descending" Sortable="true" />
            <TemplateColumn Title="Naam" SortBy="@(GridSort<Transaction>.ByAscending(p => p.NameOtherParty))" Sortable="true">
                @if (_transactionIdMarkingAsCashback == context.Id)
                {
                    <TransactionMarkAsCashback Transaction="@context" OnDone="HandleCashbackDone" />
                }
                else
                {
                    <span>@context.NameOtherParty</span>
                }
            </TemplateColumn>
            <TemplateColumn Title="Bedrag" SortBy="@(GridSort<Transaction>.ByDescending(p => p.Amount))" Sortable="true">
                <span class="badge text-bg-@(context.Amount < 0 ? "danger" : "success")">
                    @context.Amount
                </span>
            </TemplateColumn>
            <TemplateColumn Title="Is vast" SortBy="@_fixedSort">
                @(context.IsFixed ? "🔒" : "")

                @if (context.CashbackForDate != null)
                {
                    string cashbackDisplay = $"Originele datum: {context.OriginalDate.ToString("yyyy-MM-dd")}";

                    <button type="button" class="btn btn-sm" data-bs-toggle="popover" data-bs-content="@cashbackDisplay" data-bs-placement="top">
                        <i class="bi bi-sign-turn-left"></i>
                        <span class="visually-hidden">@cashbackDisplay</span>
                    </button>
                }
            </TemplateColumn>
            <PropertyColumn Title="Description" Property="@(p => p.Description)" Sortable="true" />
        </QuickGrid>
    </section>
</main>